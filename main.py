from aiogram import executor 
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.utils.markdown import hbold
from collections import defaultdict
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.callback_data import CallbackData


import random
import string
import json
import os
import re
import logging


from aiogram.types import KeyboardButton
from tok import API_TOKEN, ALLOWED_USER_ID # –ò–º–ø–æ—Ä—Ç –¢–û–∫–µ–Ω–∞
from db import * # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ db.py
# create_db() # –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è db –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç


def save_message_to_json(nickname, message): # –ü—Ä–∏–∫–æ–ª—ã –¥–ª—è –¥–µ–¥–∞
    file_name = "messages.json"
    
    if os.path.exists(file_name):
        with open(file_name, "r") as file:
            data = json.load(file)
    else:
        data = []

    data.append({"nickname": nickname, "message": message})

    with open(file_name, "w") as file:
        json.dump(data, file)


storage = MemoryStorage()
bot = Bot(token=API_TOKEN) # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher(bot, storage = storage) # –•—É–Ω—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp.middleware.setup(LoggingMiddleware())

logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –Ω–∏–∫
def generate_random_nick(length=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(length))


import random

vowels = ['Kobayashi', 'Yamamoto', 'Takahashi', 'Watanabe', 'Nakamura', 'Mori', 'Yoshida', 'Inoue', 'Yamada', 'Sasaki', 'Nakajima', 'Kato', 'Okada', 'Ishii', 'Fujita', 'Ito', 'Hayashi', 'Sakai', 'Ono', 'Omura', 'Matsuda', 'Miyazaki', 'Nishimura', 'Fukuda', 'Takeuchi', 'Ueda', 'Nagai', 'Ogawa', 'Hara', 'Kojima', 'Nakano', 'Uchida', 'Nakayama', 'Kaneko', 'Tamura', 'Takada', 'Hoshino', 'Imai', 'Kubota', 'Okamoto', 'Sugiyama', 'Yokoyama', 'Arai', 'Taniguchi', 'Kondo', 'Saito', 'Kawaguchi', 'Nakagawa', 'Ishikawa', 'Fujimoto', 'Hashimoto', 'Maeda', 'Matsui', 'Shimizu', 'Miyamoto', 'Miyashita', 'Sugawara', 'Ando', 'Sato', 'Murata', 'Mizuno', 'Kawai', 'Yamashita', 'Noguchi', 'Matsuo', 'Ozawa', 'Kikuchi', 'Oshima', 'Kawasaki', 'Yamaguchi', 'Hirano', 'Fujii', 'Ishida', 'Endo', 'Ogata', 'Kumagai', 'Aoki', 'Hasegawa', 'Sakamoto', 'Eguchi', 'Kodama', 'Morioka', 'Takizawa', 'Sugimoto', 'Yasuda', 'Takahara', 'Goto', 'Shibata', 'Tsuda', 'Takeda', 'Kimura', 'Tsuchiya', 'Yamagishi', 'Izumi', 'Kawano', 'Otsuka', 'Takano', 'Oyama', 'Yamazaki', 'Wada', 'Noda', 'Sakata', 'Sakurai', 'Suzuki', 'Yoshikawa', 'Inoue', 'Tsukamoto', 'Muto', 'Nishida', 'Mochizuki', 'Kawabata', 'Yokota', 'Asano', 'Igarashi', 'Koga', 'Fukushima', 'Higuchi', 'Maruyama', 'Iida', 'Kawakami', 'Nishiyama', 'Kobayashi', 'Kasai', 'Kawamura', 'Terada', 'Niwa', 'Kanai', 'Yoshimura', 'Furukawa', 'Takagi', 'Hori', 'Inaba', 'Kawashima', 'Kameda', 'Ishikawa', 'Hino', 'Shimada', 'Yagi', 'Nakata', 'Sakaguchi', 'Sone', 'Matsunaga', 'Kawamoto', 'Kinoshita', 'Nakazawa', 'Ota', 'Ueno', 'Shirai', 'Sekiguchi', 'Ishihara', 'Kasahara', 'Kurihara', 'Toyoda', 'Kobayashi', 'Nakano', 'Anzai', 'Nagashima', 'Kikuchi', 'Tsuchida', 'Shimoda', 'Yokouchi', 'Yamane', 'Minami', 'Nomura', 'Kawada', 'Shimazaki', 'Nakasone', 'Abe', 'Kusano', 'Kosugi', 'Kanazawa', 'Horiuchi', 'Tanabe', 'Sugihara', 'Taguchi', 'Amano', 'Kajiwara', 'Kawagoe', 'Takei', 'Miyake', 'Ohashi', 'Kudo', 'Tomita', 'Tanimoto', 'Kawase', 'Takaya', 'Oka', 'Asai', 'Kashiwagi', 'Takahata', 'Nakai', 'Terao', 'Kaneko', 'Shoji', 'Takimoto', 'Ouchi', 'Matsubara', 'Hasegawa', 'Shindo', 'Yamabe', 'Hamada', 'Kumamoto', 'Iwata', 'Koyama', 'Oishi', 'Kurita', 'Yamagata', 'Sakuma', 'Sugita', 'Uchiyama', 'Kitagawa', 'Miyazawa', 'Yamamoto', 'Matsuyama', 'Furuta', 'Sekine', 'Tsutsui', 'Sakoda', 'Kataoka', 'Sakurada', 'Ishiguro', 'Nishikawa', 'Ozaki', 'Sato', 'Matsushita', 'Yamada', 'Kanada', 'Ishimoto', 'Kojima', 'Takeuchi', 'Nishimura', 'Muraoka', 'Inagaki', 'Saito', 'Sakai', 'Suzuki', 'Kawano', 'Ogino', 'Mizutani', 'Kamikawa', 'Mizoguchi', 'Kondo', 'Tsukada', 'Takemoto', 'Takayama', 'Akita', 'Nakagawa', 'Nakamura', 'Okazaki', 'Yoshida', 'Tachibana', 'Kanai', 'Miyoshi', 'Ishikura', 'Okada', 'Yamazaki', 'Araki', 'Shibuya', 'Shimomura', 'Nakano', 'Kikuchi', 'Yoshino', 'Hayakawa', 'Wakabayashi', 'Takeuchi', 'Sakamoto', 'Ogawa', 'Ishii', 'Nakata', 'Shimizu', 'Yoshida', 'Aoyama', 'Nakayama', 'Kojima', 'Fukuda', 'Takahashi', 'Inoue', 'Yamaguchi', 'Matsuda', 'Miyazaki', 'Nishimura', 'Nakamura', 'Yoshida', 'Mori', 'Ishikawa', 'Kato', 'Yamada', 'Sasaki', 'Nakajima', 'Saito', 'Sakai', 'Suzuki', 'Kawano', 'Ogino', 'Mizutani', 'Kamikawa']
adjectives = ['Akira', 'Akihiro', 'Daichi', 'Daisuke', 'Eiji', 'Fumio', 'Goro', 'Haruki', 'Hiroshi', 'Hiroto', 'Hisao', 'Hitoshi', 'Ichiro', 'Isamu', 'Jun', 'Junichi', 'Jiro', 'Kaito', 'Kazuki', 'Kazuo', 'Kazuya', 'Kei', 'Keiji', 'Keisuke', 'Ken', 'Kenichi', 'Kenta', 'Kiyoshi', 'Koichi', 'Koji', 'Kosuke', 'Makoto', 'Manabu', 'Masahiro', 'Masaki', 'Masao', 'Masaru', 'Masashi', 'Masato', 'Masayuki', 'Mitsuru', 'Miyuki', 'Nao', 'Naoki', 'Naoto', 'Noboru', 'Nobuhiro', 'Nobuo', 'Nobuyuki', 'Norio', 'Osamu', 'Rei', 'Riku', 'Ryo', 'Ryota', 'Ryu', 'Ryosuke', 'Satoshi', 'Seiji', 'Shin', 'Shinichi', 'Shinji', 'Shintaro', 'Shinya', 'Shiro', 'Shota', 'Shuichi', 'Shun', 'Shunsuke', 'Susumu', 'Tadashi', 'Takahiro', 'Takao', 'Takashi', 'Takayuki', 'Takeo', 'Takeshi', 'Tatsuya', 'Tetsuya', 'Tooru', 'Toshiaki', 'Toshio', 'Tsutomu', 'Yasushi', 'Yasutaka', 'Yoichi', 'Yoji', 'Yoshiaki', 'Yoshio', 'Yoshito', 'Yosuke', 'Yuichi', 'Yuki', 'Yukio', 'Yusuke', 'Yutaka', 'Ai', 'Aiko', 'Airi', 'Akane', 'Akemi', 'Aki', 'Akiko', 'Asuka', 'Ayaka', 'Ayame', 'Aya', 'Ayumi', 'Azumi', 'Chie', 'Chieko', 'Chiharu', 'Chihiro', 'Chika', 'Chinatsu', 'Eiko', 'Emi', 'Emiko', 'Eri', 'Erika', 'Erina', 'Fumiko', 'Hana', 'Haru', 'Haruka', 'Harumi', 'Hatsue', 'Hikari', 'Hikaru', 'Hina', 'Hiroko', 'Hiromi', 'Hisako', 'Hitomi', 'Honoka', 'Izumi', 'Junko', 'Kana', 'Kanako', 'Kaori', 'Kasumi', 'Kazuko', 'Kazumi', 'Keiko', 'Kiko', 'Kiyoko', 'Kumiko', 'Kyouko', 'Mai', 'Makiko', 'Mami', 'Manami', 'Mari', 'Mariko', 'Masako', 'Maya', 'Mayu', 'Mayumi', 'Megumi', 'Michiko', 'Mieko', 'Miho', 'Mika', 'Miki', 'Mikiko', 'Minako', 'Mio', 'Nana', 'Nanami', 'Nao', 'Naoko', 'Natsuki', 'Natsumi', 'Nobuko', 'Noriko', 'Nozomi', 'Rei', 'Reiko', 'Rena', 'Rie', 'Rika', 'Riko', 'Rina', 'Risa', 'Rumi', 'Ryoko', 'Saeko', 'Saki', 'Sakura', 'Sana', 'Sanae', 'Satomi', 'Sayaka', 'Sayuri', 'Seiko', 'Shiho', 'Shiori', 'Shizuka', 'Shizuko', 'Sora', 'Sumiko', 'Takako', 'Tamiko', 'Tomiko', 'Tomoko', 'Tomomi', 'Tsubasa', 'Tsukiko', 'Umeko', 'Yayoi', 'Yoko', 'Yoshiko', 'Yui', 'Yuina', 'Yuka', 'Yuki', 'Yukiko', 'Yuko', 'Yumi', 'Yumiko', 'Yuriko', 'Yuuka', 'Yuuki', 'Yuzuki', 'Issey', 'Itsuki', 'Izumi', 'Jin', 'Junya', 'Kaede', 'Kai', 'Kaito', 'Kanata', 'Kazuhiko', 'Kazuma', 'Keigo', 'Keita', 'Kenji', 'Kenshin', 'Kenta', 'Kiyohiko', 'Kohei', 'Kohaku', 'Kotaro', 'Kou', 'Kunio', 'Kyohei', 'Kyosuke', 'Mamoru', 'Manato', 'Masaaki', 'Masanori', 'Masayoshi', 'Michihiro', 'Minori', 'Mitsuhiro', 'Mizuki', 'Natsuo', 'Nobuhiko', 'Norihito', 'Raito', 'Riku', 'Rin', 'Ryoichi', 'Ryota', 'Ryugo', 'Ryuuji', 'Seiichi', 'Seiya', 'Shigeki', 'Shinjiro', 'Sho', 'Shohei', 'Shota', 'Shunichi', 'Shunji', 'Taiga', 'Taiki', 'Taisei', 'Takuma', 'Tatsuki', 'Tetsuji', 'Tomoaki', 'Tomohiro', 'Toshinori', 'Tsuyoshi', 'Yasuhiro', 'Yasunori', 'Yoshinori', 'Yosuke', 'Yuji', 'Yukihiro', 'Yusaku', 'Yuto', 'Yuya', 'Zen']
emojis = ["üòÄ", "üòÅ", "üòÇ", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòá", "üòâ", "üòä", "üòã", "üòå", "üòç", "üòé", "üòè", "üòê", "üòë", "üòí", "üòì", "üòî", "üòï", "üòñ", "üòó", "üòò", "üòô", "üòö", "üòõ", "üòú", "üòù", "üòû", "üòü", "üò†", "üò°", "üò¢", "üò£", "üò§", "üò•", "üò¶", "üòß", "üò®", "üò©", "üò™", "üò´", "üò¨", "üò≠", "üòÆ", "üòØ", "üò∞", "üò±", "üò≤", "üò≥", "üò¥", "üòµ", "üò∂", "üò∑", "üò∏", "üòπ", "üò∫", "üòª", "üòº", "üòΩ", "üòæ", "üòø", "üôÄ", "üôÅ", "üôÇ", "üôÉ", "üôÑ", "üôÖ", "üôÜ", "üôá", "üôà", "üôâ", "üôä", "üôã", "üôå", "üôç", "üôé", "üôè"]

def generate_word():
    first_name = random.choice(vowels)
    last_name = random.choice(adjectives)
    emoji = random.choice(emojis)
    return f"[{emoji}] {first_name} {last_name}"

# def check_permissions_and_add_subscription(user_id: int):
#     with sqlite3.connect("users.db") as db:
#         cursor = db.cursor()
        
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
#         cursor.execute("SELECT subscription FROM users WHERE id = ?", (user_id,))
#         user_data = cursor.fetchone()
#         if not user_data or user_data[0] == 0:
#             cursor.execute("UPDATE users SET subscription=1 WHERE id=?", (user_id,))

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∫–∏
#         cursor.execute("SELECT is_admin FROM users WHERE id = ?", (user_id,))
#         user_data = cursor.fetchone()
#         if not user_data or user_data[0] == 0:
#             cursor.execute("UPDATE users SET is_admin = 1 WHERE id = ?", (user_id,))
        
#         db.commit()


@dp.message_handler(commands=['start']) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def cmd_start(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    # check_permissions_and_add_subscription(user_id)
    ban_status = get_ban_status(user_id)
    print(f">>>>>>>>>>BAN>>>>>>: {ban_status}")
    if ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    name = generate_word() # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏
    user_id = message.from_user.id # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    user_first_name = message.from_user.first_name # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—ã—Ä–π –Ω–∞–ø–∏—Å–∞–ª
    print (f"Commands >> /start\nID >> {get_id(user_id)}\nNAME >> {get_nick(user_id)}\nSUB_STATUS >> {get_subscription(user_id)}\n\n") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    add_user_to_db(user_id, user_first_name, name) # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–µ –µ–π id –∏ –∏–º—è
    subscription_status = get_subscription(user_id)
    subscription_type = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if subscription_status == 0 else "–ü–ª–∞—Ç–Ω—ã–π"
    welcome_text = f"<b>ü§ö–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\nüë§–¢–≤–æ–π –Ω–∏–∫ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ: \n    [{get_nickName(user_id)}]\n\n–°—Ç—É—Ç—É—Å–ü–æ–¥–ø–∏—Å–∫–∏: \n    ü§© {subscription_type}\n\nüëΩ–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏.\n ‚ùì–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ñ–º–∏ /help</b>" # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–≤–æ–¥
    sticker_id = "CAACAgIAAxkBAAICumQ8O1zpaRc7q9G5_xY9OWnmEzSlAAJJAgACVp29CiqXDJ0IUyEOLwQ"  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞ (file_id)
    await bot.send_sticker(chat_id=message.chat.id, sticker=sticker_id)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    markup = create_keyboard(user_id)
    await message.reply(welcome_text, parse_mode=ParseMode.HTML, reply_markup=markup) # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class ReportState(StatesGroup):
    user_nick = State()
    report_reason = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@dp.message_handler(Command("report"), state=None)
async def report_command(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await ReportState.user_nick.set()

@dp.message_handler(state=ReportState.user_nick)
async def process_user_nick(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_nick = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(user_nick=user_nick)

    # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await ReportState.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:")

@dp.message_handler(state=ReportState.report_reason)
async def process_report_reason(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_nick = state_data["user_nick"]
    report_reason = message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    report_text = f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n {user_nick}\n–ü—Ä–∏—á–∏–Ω–∞: {report_reason}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admins_data = get_admins()
    for admin_id, username, nick in admins_data:
        try:
            await bot.send_message(chat_id=admin_id, text=report_text)
        except Exception as e:
            logging.error(f"Failed to send report to admin {admin_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã
    await message.reply("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

class UserState(StatesGroup):
    admin_nick = State()
    message_text = State()
    reply_to_user = State()

class AdminState(StatesGroup):
    ban = State()
    unban = State()

# Define callback data
reply_cb = CallbackData("reply", "user_id")



@dp.message_handler(lambda message: message.text == "üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", state=None)
async def write_to_admin_button(message: types.Message):
    await list_admins_command(message)


admin_id_to_nick_map = {}

# Define new callback data
write_cb = CallbackData("write", "admin_id")

@dp.message_handler(Command("lsadmin"), state=None)
async def list_admins_command(message: types.Message):
    admins_data = get_admins()

    # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
    markup = InlineKeyboardMarkup()
    for admin_id, username, nick in admins_data:
        # Save admin_id to admin_nick mapping
        admin_id_to_nick_map[admin_id] = nick

        markup.add(InlineKeyboardButton(f"{nick}", callback_data=write_cb.new(admin_id=admin_id)))

    await message.reply("–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–∏—Å–∞—Ç—å: \nùóïùòÜùòÅùó≤ùóïùòÇùòÄùòÅùó≤ùóø'ùòÄ ùêàùêì üëëOWNERüëë\n\n–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n", reply_markup=markup)

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await UserState.admin_nick.set()

# New callback query handler
@dp.callback_query_handler(write_cb.filter(), state=UserState.admin_nick)
async def process_write_button(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    admin_id = int(callback_data["admin_id"])
    admin_nick = admin_id_to_nick_map.get(admin_id)

    # Save state data
    await state.update_data(admin_id=admin_id, admin_nick=admin_nick)

    # Next state
    await UserState.next()
    await call.answer()
    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞:")

@dp.message_handler(state=UserState.message_text)
async def process_message_text(message: types.Message, state: FSMContext):
    # Get state data
    data = await state.get_data()
    admin_nick = data.get("admin_nick")
    message_text = message.text

    if admin_id := get_admin_id_by_nick(admin_nick):
        sender_name = message.from_user.first_name
        sender_id = message.from_user.id

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=reply_cb.new(user_id=sender_id)))
        await bot.send_message(admin_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name} (ID: {sender_id}):\n\n{message_text}", reply_markup=markup)
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    else:
        await message.reply("–ê–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # Finish state
    await state.finish()

@dp.message_handler(state=UserState.reply_to_user)
async def process_reply_to_user(message: types.Message, state: FSMContext):
    # Get state data
    data = await state.get_data()
    recipient_id = data.get("reply_to_user_id")
    message_text = message.text

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(recipient_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message_text}")
    await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    # Finish state
    await state.finish()

@dp.callback_query_handler(reply_cb.filter(), state=None)
async def process_callback(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    admin_id = call.from_user.id

    # Get user id from callback data
    user_id = int(callback_data["user_id"])
    await state.update_data(reply_to_user_id=user_id)
    await UserState.reply_to_user.set()
    await call.answer()
    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")



@dp.callback_query_handler(lambda c: c.data and c.data.startswith('next_5_users_'), state="*")
async def process_callback_next_users(callback_query: types.CallbackQuery, state: FSMContext):
    offset = int(callback_query.data.split('_')[-1])
    users = get_all_users()
    users_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users[offset:offset+5]:
        users_text += f"    ID: {user['id']},\n    Username: {user['username']},\n    Nick: {user['nickname']}\n\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"next_5_users_{offset + 5}")) 

    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=users_text, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

#################################################################################################################################–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /menu
@dp.message_handler(commands=['profile'])
async def show_menu(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    ban_status = get_ban_status(user_id)
    print(f">>>>>>>>>>BAN>>>>>>: {ban_status}")
    if ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    await additional_info(message)
#################################################################################################################################–û–±—Ä–∞–±–æ—á—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    ban_status = get_ban_status(user_id)
    print(f">>>>>>>>>>BAN>>>>>>: {ban_status}")
    if ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ:\n\n"
        "/start - [–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.]\n\n"
        "/help - [–ø–æ–º–æ—â—å.]\n\n"
        "/profile - [–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.]\n\n"
        "/report - [–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.]\n\n"
        "/lsadmin - [–Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.]\n\n"
        "–ö–Ω–æ–ø–∫–∞ –°–º–µ–Ω—ã –ù–∏–∫–∞ - [–ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–Ω—ã–µ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—è].]\n\n"
        "–ö–Ω–æ–ø–∫–∞ –°–º–µ–Ω–∏—Ç—å –≠–º–æ–¥–∑–∏ - [–ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ä—è–¥–æ–º —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º!]\n\n"
        "–£–¥–∞—á–∏!"
    )
    await message.reply(help_text)

#################################################################################################################################–û–±—Ä–∞–±–æ—á—Ç–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–æ–≤
@dp.message_handler(commands=['admin'])
async def help_command(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    ban_status = get_ban_status(user_id)
    print(f">>>>>>>>>>BAN>>>>>>: {ban_status}")
    if ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    user_id = message.from_user.id
    if is_admin(user_id):
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="button1"),
            InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="button2"),
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º", callback_data="button_send_message"),
            InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å", callback_data="button4"),
            InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="unban"),
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="button_create_announcement"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="del"),
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add"),
            InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="give_subscription"),
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="button_send_message_all_users"),
            InlineKeyboardButton("–î–∏–∞–Ω–æ–Ω", callback_data="dianon"),
        ]
        keyboard.add(*buttons)
        await message.reply("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
    else:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

def is_allowed_user(user_id: int) -> bool:
    return user_id == ALLOWED_USER_ID
#################################################################################################################################
admins_in_dianon = set()
@dp.callback_query_handler(lambda c: c.data == "dianon" and is_allowed_user(c.from_user.id))
async def dianon(callback_query: types.CallbackQuery):
    admins_in_dianon.add(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.message_handler(lambda message: message.from_user.id in admins_in_dianon and is_allowed_user(message.from_user.id))
async def process_dianon_request(message: types.Message):
    admins_in_dianon.remove(message.from_user.id)
    nickname = message.text
    user_info = get_user_info_by_nickname(nickname)

    if user_info is not None:
        user_info_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {nickname}:\nID: {user_info['id']}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['username']}\n–ü–æ–¥–ø–∏—Å–∫–∞: {user_info['subscription']}"
        await message.reply(user_info_text)
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#################################################################################################################################–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
from aiogram.utils.exceptions import ChatNotFound
async def safe_send_message(user_id, text):
    try:
        sent_message = await bot.send_message(user_id, text=text)
        return sent_message
    except BotBlocked:
        return None
    except ChatNotFound:
        return None
users_in_send_message = set()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π "button_send_message_all_users"
@dp.callback_query_handler(lambda c: c.data == "button_send_message_all_users")
async def send_message_to_all_users(callback_query: types.CallbackQuery):
    users_in_send_message.add(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(lambda message: message.from_user.id in users_in_send_message)
async def process_message_to_all_users(message: types.Message):
    users_in_send_message.remove(message.from_user.id)
    users = get_all_users()
    user_id = message.from_user.id
    senderName = get_nickName(user_id)
    message_text = f"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç \n<b>{senderName}</b>\n\n–¢–µ–∫—Å—Ç:\n<b>{message.text}</b>\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"

    sticker_id = "CAACAgIAAxkBAAINqWRL-IFSF7ArCwvN_2hXqMgNq2a0AAIFAAPz8o4_GXFkIBUaWGcvBA"

    for user in users:
        if user['id'] != message.from_user.id:
            try:
                await bot.send_sticker(user['id'], sticker_id)
                await bot.send_message(user['id'], message_text, parse_mode=ParseMode.HTML)
                await asyncio.sleep(1) 
                await bot.send_sticker(user['id'], sticker_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 1 —Å–µ–∫—É–Ω–¥—É.")


#################################################################################################################################–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'give_subscription')
async def give_subscription_handler(callback_query: types.CallbackQuery):
    users_data = get_users_without_subscription()
    keyboard = InlineKeyboardMarkup(row_width=1)

    for user_id, username, nick in users_data:
        button = InlineKeyboardButton(f"{username} ({nick})", callback_data=f"give_sub_{user_id}")
        keyboard.add(button)

    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                reply_markup=keyboard)



@dp.callback_query_handler(lambda c: c.data.startswith('give_sub_'))
async def give_subscription_to_user_handler(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[2])
    
    with sqlite3.connect("users.db") as db:
        cursor = db.cursor()
        cursor.execute("UPDATE users SET subscription=1 WHERE id=?", (user_id,))
        db.commit()

    await bot.answer_callback_query(callback_query.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
    await give_subscription_handler(callback_query)



#################################################################################################################################–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(lambda c: c.data == 'add' and is_allowed_user(c.from_user.id))
async def show_users_for_adding(callback_query: types.CallbackQuery):
    users_data = get_users()
    keyboard = InlineKeyboardMarkup(row_width=1)

    for user_id, username, nick in users_data:
        button = InlineKeyboardButton(f"{username} ({nick})", callback_data=f"add_{user_id}")
        keyboard.add(button)

    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('add_') and is_allowed_user(c.from_user.id))
async def add_admin_handler(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    add_admin(user_id)
    await bot.answer_callback_query(callback_query.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    await show_users_for_adding(callback_query)


#################################################################################################################################–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'del' and is_allowed_user(c.from_user.id))
async def show_admins_for_removal(callback_query: types.CallbackQuery):
    admins_data = get_admins()
    keyboard = InlineKeyboardMarkup(row_width=1)

    for admin_id, username, nick in admins_data:
        if admin_id != callback_query.from_user.id:
            button = InlineKeyboardButton(f"{username} ({nick})", callback_data=f"remove_{admin_id}")
            keyboard.add(button)

    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('remove_') and is_allowed_user(c.from_user.id))
async def remove_admin_handler(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    remove_admin(user_id)
    await bot.answer_callback_query(callback_query.id, text=f"–ê–¥–º–∏–Ω —Å ID {user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    await show_admins_for_removal(callback_query)

#################################################################################################################################–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
@dp.callback_query_handler(lambda c: c.data == 'unban', state='*')
async def process_callback_next_users(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(chat_id=callback_query.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å:")
    await bot.answer_callback_query(callback_query.id)
    
    admins_in_send_message_mode.add(callback_query.from_user.id)
    offset = 0
    users = get_all_users()
    users_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users[offset:offset+5]:
        users_text += f"    ID: {user['id']},\n    Username: {user['username']},\n    Nick: {user['nickname']}\n\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"next_5_users_{offset + 5}")) 

    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=users_text, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)
    await AdminState.unban.set()

@dp.message_handler(state=AdminState.unban)
async def process_unban_user(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_id = int(message.text)
        unban_user(user_id)
        await bot.send_message(chat_id=message.from_user.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.finish()


#################################################################################################################################–û–±—è–≤–ª–µ–Ω–∏–µ
is_sending_announcement = defaultdict(bool)

@dp.callback_query_handler(lambda c: c.data == 'button_create_announcement')
async def create_announcement(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id

    if is_admin(user_id):
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å <pre>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</pre>", parse_mode=ParseMode.HTML)
        is_sending_announcement[user_id] = True
    else:
        await bot.send_message(user_id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

@dp.message_handler(lambda message: message.text.startswith("–û–±—ä—è–≤–ª–µ–Ω–∏–µ:") and is_admin(message.from_user.id) and is_sending_announcement[message.from_user.id], content_types=types.ContentTypes.TEXT)
async def send_announcement(message: types.Message):
    user_id = message.from_user.id
    announcement_text = message.text.replace("–û–±—ä—è–≤–ª–µ–Ω–∏–µ:", "").strip()
    is_sending_announcement[user_id] = False

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∞—Ç–µ
    for user in active_users.keys():
        if active_users[user] and user != user_id:
            await bot.send_message(user, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n<pre>{announcement_text}</pre>", parse_mode=ParseMode.HTML)

    await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", parse_mode=ParseMode.HTML)


#################################################################################################################################–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    admins = get_admins()
    admins_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n"
    for admin in admins:
        admins_text += f"    ID: {admin[0]}\n    Username: {admin[1]}\n    Nick: {admin[2]}\n\n"

    await bot.send_message(callback_query.from_user.id, admins_text.strip())

#################################################################################################################################–ë–∞–Ω
@dp.callback_query_handler(lambda c: c.data == 'button4', state='*')
async def process_callback_button4(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    admins_in_send_message_mode.add(callback_query.from_user.id)
    offset = 0
    users = get_all_users()
    users_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users[offset:offset+5]:
        users_text += f"    ID: {user['id']},\n    Username: {user['username']},\n    Nick: {user['nickname']}\n\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"next_5_users_{offset + 5}")) 

    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=users_text, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å:")
    await AdminState.ban.set()

@dp.message_handler(state=AdminState.ban)
async def process_ban_user(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_id = int(message.text)
        ban_user(user_id)
        await bot.send_message(chat_id=message.from_user.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.finish()

#################################################################################################################################–í—ã–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π
@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    users = get_all_users()
    users_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users[:5]:
        users_text += f"    ID: {user['id']},\n    Username: {user['username']},\n    Nick: {user['nickname']}\n\n"

    offset = 0 
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"next_5_users_{offset + 5}")) 

    await bot.send_message(callback_query.from_user.id, users_text, reply_markup=keyboard)

#################################################################################################################################–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±–≤—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫
@dp.callback_query_handler(lambda c: re.match("next_5_users_\d+", c.data))
async def process_callback_next_5_users(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    offset = int(callback_query.data.split("_")[-1])
    users = get_all_users()
    users_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users[offset:offset + 5]:
        users_text += f"ID: {user['id']},\n Username: {user['username']},\n Nick: {user['nickname']}\n\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"next_5_users_{offset + 5}"))

    await bot.send_message(callback_query.from_user.id, users_text, reply_markup=keyboard)

admins_in_send_message_mode = set()

#################################################################################################################################–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
admins_in_send_message = set()

@dp.callback_query_handler(lambda c: c.data == "button_send_message")
async def send_message_to_admin(callback_query: types.CallbackQuery):
    admins_in_send_message.add(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

@dp.message_handler(lambda message: message.from_user.id in admins_in_send_message)
async def process_message_from_admin(message: types.Message):
    admins_in_send_message.remove(message.from_user.id)
    admin_ids = get_admin_ids()
    sender_name = message.from_user.first_name
    message_text = f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {sender_name}: {message.text}"

    for admin_id in admin_ids:
        if admin_id != message.from_user.id:
            try:
                await bot.send_message(admin_id, message_text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º.")


#################################################################################################################################–ú–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üÜò –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", content_types=types.ContentTypes.TEXT)
async def additional_info(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    ban_status = get_ban_status(user_id)
    print(f">>>>>>>>>>BAN>>>>>>: {ban_status}")
    if ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    user_id = message.from_user.id
    nickname = get_nickName(user_id)
    requested = find_user_by_nickname(nickname)
    profile_desc = get_profile_description(requested)

    user_repu = get_user_reputation(requested)
    subscription_status = get_subscription(user_id)
    subscription_ty = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if subscription_status == 0 else "–ü–ª–∞—Ç–Ω—ã–π"
    profile_info_text = (
            f"–ù–∏–∫ –≤ —á–∞—Ç–µ:\n"
            f"    {nickname}\n\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"    ü§© {subscription_ty}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n"
            f"    {profile_desc}\n\n"
            f"–†–µ–ø—É—Ç–∞—Ü–∏—è:\n"
            f"    üåü {user_repu}\n\n"
        )
    await message.reply(profile_info_text)

#################################################################################################################################–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@dp.message_handler(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥", content_types=types.ContentTypes.TEXT)
async def back_to_main_menu(message: types.Message):
    user_id = message.from_user.id
    markup = create_keyboard(user_id)
    await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

#################################################################################################################################–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞
async def ask_for_new_nickname(message: types.Message):
    markup = types.ForceReply(selective=True)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:", reply_markup=markup)

async def generate_random_nickname():
    random_emoji = random.choice(EMOJIS)
    random_vowel = random.choice(vowels)
    random_adjective = random.choice(adjectives)
    return random_emoji + " " + random_vowel + " " + random_adjective

@dp.message_handler(lambda message: message.text == "‚ôæ –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫", content_types=types.ContentTypes.TEXT)
async def cmd_rename(message):
    user_id = message.from_user.id
    subscription, remaining_changes = get_subscription_and_remaining_changes(user_id)

    if remaining_changes <= 0 and not subscription:
        await message.reply("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –Ω–∏–∫–∞.")
        await message.reply("–î–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
        return 

    random_nickname = await generate_random_nickname()

    while is_nickname_taken(random_nickname):
        random_nickname = await generate_random_nickname()

    update_nickName(user_id, random_nickname)

    if not subscription:
        _, remaining_changes = get_subscription_and_remaining_changes(user_id)
        updated_remaining_changes = remaining_changes - 1
        update_remaining_name_changes(user_id, updated_remaining_changes)

    markup = create_keyboard(user_id)

    if subscription:
        await message.reply(f"–ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: \n    {hbold(get_nickName(user_id))}", parse_mode=ParseMode.HTML, reply_markup=markup)
    else:
        await message.reply(f"–ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: \n    {hbold(get_nickName(user_id))}. –û—Å—Ç–∞–ª–æ—Å—å —Å–º–µ–Ω –Ω–∏–∫–∞: {updated_remaining_changes}", parse_mode=ParseMode.HTML, reply_markup=markup)


async def generate_random_emoji():
    return random.choice(EMOJIS)

@dp.message_handler(lambda message: message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", content_types=types.ContentTypes.TEXT)
async def cmd_change_emoji(message):
    user_id = message.from_user.id
    subscription, remaining_changes = get_subscription_and_remaining_changes(user_id)

    if remaining_changes <= 0 and not subscription:
        await message.reply("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —ç–º–æ–¥–∑–∏.")
        await message.reply("–î–ª—è —Å–º–µ–Ω—ã —ç–º–æ–¥–∑–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    random_emoji = await generate_random_emoji()

    random_emoji = await generate_random_emoji()

    update_emoji(user_id, random_emoji)

    if not subscription:
        _, remaining_changes = get_subscription_and_remaining_changes(user_id)
        updated_remaining_changes = remaining_changes - 1
        update_remaining_name_changes(user_id, updated_remaining_changes)

    markup = create_keyboard(user_id)

    if subscription:
        await message.reply(f"–≠–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: \n    {get_nickName(user_id)}", parse_mode=ParseMode.HTML, reply_markup=markup)
    else:
        await message.reply(f"–≠–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: \n    {get_nickName(user_id)}. \n\n–û—Å—Ç–∞–ª–æ—Å—å —Å–º–µ–Ω —ç–º–æ–¥–∑–∏: {updated_remaining_changes}", parse_mode=ParseMode.HTML, reply_markup=markup)


def is_nickname_taken(nickname):
    users = get_all_users()
    return any(user["nickname"] == nickname for user in users)

# @dp.message_handler(lambda message: message.reply_to_message and message.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:", content_types=types.ContentTypes.TEXT)
# async def process_new_nickname(message: types.Message):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
#     if message.text.isalnum():
#         if message.sticker:
#             await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤.")
#             return
#         user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
#         new_nickname = message.text
#         if is_nickname_taken(new_nickname):
#             await message.reply(f"–ù–∏–∫ {hbold(new_nickname)} —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫.", parse_mode=ParseMode.HTML)
#             await ask_for_new_nickname(message)
#         else:
#             new_nickname_with_emoji = add_emoji_to_nickname(new_nickname)
#             update_nickName(user_id, new_nickname_with_emoji)
#             is_changing_nickname[user_id] = False
#             _, remaining_changes = get_subscription_and_remaining_changes(user_id)
#             updated_remaining_changes = remaining_changes - 1
#             update_remaining_name_changes(user_id, updated_remaining_changes)
#             markup = create_keyboard(user_id)
#             await message.reply(f"–ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {hbold(get_nickName(user_id))}. –û—Å—Ç–∞–ª–æ—Å—å —Å–º–µ–Ω –Ω–∏–∫–∞: {updated_remaining_changes}", parse_mode=ParseMode.HTML, reply_markup=markup)
#     else:
#         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤.")
#         await ask_for_new_nickname(message)

EMOJIS = ['üòÅ', 'üòÇ', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'üòó', 'üòô', 'üòö', 'üòõ', 'üòú', 'üòù', 'üòû', 'üòü', 'üò†', 'üò°', 'üò¢', 'üò£', 'üò§', 'üò•', 'üò¶', 'üòß', 'üò®', 'üò©', 'üò™', 'üò´', 'üò¨', 'üò≠', 'üòÆ', 'üòØ', 'üò∞', 'üò±', 'üò≤', 'üò≥', 'üò¥', 'üòµ', 'üò∂', 'üò∑', 'üò∏', 'üòπ', 'üò∫', 'üòª', 'üòº', 'üòΩ', 'üòæ', 'üòø', 'üôÄ', 'üôÅ', 'üôÇ', 'üôÉ', 'üôÑ', 'üôÖ', 'üôÜ', 'üôá', 'üôà', 'üôâ', 'üôä', 'üôã', 'üôå', 'üôç', 'üôé', 'üôè', 'üêµ', 'üê∂', 'üê±', 'ü¶ä', 'üêª', 'üêº', 'ü¶Å', 'üêØ', 'üê®']
def add_emoji_to_nickname(nickname):
    emoji = random.choice(EMOJIS)
    return f"{emoji} {nickname}"
#################################################################################################################################–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
active_users = defaultdict(bool)
# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
is_changing_nickname = defaultdict(bool)
# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
user_sent_messages = {}
# –•–∑ –∑–∞–±–ª—ã —á—Ç–æ —ç—Ç–æ
user_message_links = {}

user_replies = {}

def get_user_group(user_id):
    return next((group for group in groups if user_id in groups[group]), None)


#################################################################################################################################–ì—Ä—É–ø–ø—ã
groups = {
    # "–ì–µ–π": [],
    # "–ë–∏": [],
    # "—Ç—Ä–∞–Ω—Å": [],
    # "–õ–µ—Å–±–∏": [],
    "–ß–ê–¢": []
}

active_users = {}

def update_user_group(user_id, group_name):
    for group in groups:
        if user_id in groups[group]:
            groups[group].remove(user_id)
    groups[group_name].append(user_id)

def toggle_user_activity(user_id, status=None):
    if status is None:
        active_users[user_id] = not active_users[user_id]
    else:
        active_users[user_id] = status

def is_user_in_any_group(user_id):
    for group_name, group_members in groups.items():
        if user_id in group_members:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_name}.")
            return True
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    return False

async def join_group_and_enter_chat(message: types.Message, group_name: str):
    user_id = message.from_user.id
    update_user_group(user_id, group_name)
    toggle_user_activity(user_id, True)  # Add the user to the chat

    # –û–±–Ω–æ–≤–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_markup = create_keyboard(user_id)

    count = sum(active_users.values())
    nickname = get_nickName(user_id)
    subscription_status = get_subscription(user_id)
    subscription_type = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if subscription_status == 0 else "–ü–ª–∞—Ç–Ω—ã–π"
    profile_info = (
        f"–ù–∏–∫:\n"
        f"    {nickname}\n\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞:\n"
        f"    ü§© {subscription_type}"
    )
    await bot.send_message(message.chat.id, profile_info)
    await bot.send_message(message.chat.id, f"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –≥—Ä—É–ø–ø—É '<b>{group_name}</b>' –∏ –≤–æ—à–ª–∏ –≤ —á–∞—Ç. \nüñ•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: {count}", parse_mode=ParseMode.HTML, reply_markup=updated_markup)
    enter_message = f"ü§ü {nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–∞—Å—å) –∫ —á–∞—Ç—É.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: {count}"
    user_group = get_user_group(user_id)
    for user in groups[user_group]:
        if active_users[user] and user != user_id:
            await bot.send_message(user, text=enter_message)


    


# @dp.message_handler(commands=["gay"])
# async def join_gay_group(message: types.Message):
#     await join_group_and_enter_chat(message, "–ì–µ–π")

@dp.message_handler(commands=["chat"])
async def join_gay_group(message: types.Message):
    await join_group_and_enter_chat(message, "–ß–ê–¢")

# @dp.message_handler(commands=["bi"])
# async def join_bi_group(message: types.Message):
#     await join_group_and_enter_chat(message, "–ë–∏")

# #@dp.message_handler(commands=["transsexual"])
# #async def join_trans_group(message: types.Message):
# #    await join_group_and_enter_chat(message, "—Ç—Ä–∞–Ω—Å")

# @dp.message_handler(commands=["lesbians"])
# async def join_lesbian_group(message: types.Message):
#     await join_group_and_enter_chat(message, "–õ–µ—Å–±–∏")
def del_user_group(user_id: int):
    global groups
    for group in groups:
        if user_id in groups[group]:
            groups[group].remove(user_id)
#################################################################################################################################–û–±—Ä–∞–±–æ—á—Ç—á–∏–∫ —á–∞—Ç–∞
@dp.message_handler(lambda message: message.text.startswith("üí≠"), content_types=types.ContentTypes.TEXT)
async def enter_or_exit_chat(message: types.Message):
    user_id = message.from_user.id
    markup = create_keyboard(user_id)
    if not is_user_in_any_group(user_id):
        await bot.send_message(message.chat.id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤–≤–µ–¥—è –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n/chat\n", reply_markup=markup)
        return
    toggle_user_activity(user_id)
    ban_status = get_ban_status(user_id)

    if ban_status is None:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ.")
        return
    elif ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    nickname = get_nickName(user_id)

    if active_users[user_id]:
        toggle_user_activity(user_id, True)
        updated_markup = create_keyboard(user_id)
        count = sum(active_users.values())
        await bot.send_message(message.chat.id, text=f"üé≠–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: {count}", reply_markup=updated_markup)
    else:
        toggle_user_activity(user_id, False)
        updated_markup = create_keyboard(user_id)
        await bot.send_message(
            message.chat.id, text="üö•–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞. –ú—ã —Å–Ω–æ–≤–∞ –≤–∞—Å –∂–¥–µ–º –≤ –≥—Ä—É–ø–ø–∞—Ö:\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤–≤–µ–¥—è –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n/chat", reply_markup=updated_markup
        )

        count = sum(active_users.values())
        user_group = get_user_group(user_id)
        if user_group is not None:
            exit_message = f"üö™ {nickname} –ø–æ–∫–∏–Ω—É–ª(-–∞) —á–∞—Ç.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: {count}"
            for user in groups[user_group]:
                if active_users[user] and user != user_id:
                    await bot.send_message(user, text=exit_message)
            del_user_group(user_id)

#################################################################################################################################–†–µ–∞–∫—Ü–∏–∏
class ProfileFSM(StatesGroup):
    get_nickname = State()

class EditDescriptionFSM(StatesGroup):
    enter_description = State()
@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", content_types=types.ContentTypes.TEXT)
async def profile_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫
    await bot.send_message(user_id, "\n‚ùóÔ∏è–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [–ú–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–º - –õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å].\n\n‚ùì–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await ProfileFSM.get_nickname.set()


def update_rep(user_id, delta_rep, user_changing_rep_id):
    with sqlite3.connect("users.db") as db:
        cursor = db.cursor()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET reputation = reputation + ? WHERE id=?", (abs(delta_rep), user_id))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        cursor.execute("UPDATE users SET reputation = reputation - ? WHERE id=?", (abs(delta_rep), user_changing_rep_id))
        
        db.commit()

def get_user_reputation(user_id):
    with sqlite3.connect("users.db") as db:
        cursor = db.cursor()
        cursor.execute("SELECT reputation FROM users WHERE id=?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else 0
    

@dp.message_handler(lambda message: message.text != "üë§ –ü—Ä–æ—Ñ–∏–ª—å", content_types=types.ContentTypes.TEXT, state=ProfileFSM.get_nickname)
async def find_requested_user(message: types.Message, state: FSMContext):
    requested_nickname = message.text

    # –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    requested_user_id = find_user_by_nickname(requested_nickname)

    if requested_user_id is not None:
        # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_status = get_user_subscription(requested_user_id)
        subscription_type = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if subscription_status == 0 else "–ü–ª–∞—Ç–Ω—ã–π"

        # –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_description = get_profile_description(requested_user_id)

        user_reputation = get_user_reputation(requested_user_id)
        profile_info_text = (
            f"–ù–∏–∫ –≤ —á–∞—Ç–µ:\n"
            f"    {requested_nickname}\n\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"    ü§© {subscription_type}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n"
            f"    {profile_description}"
            f"–†–µ–ø—É—Ç–∞—Ü–∏—è:\n"
            f"    üåü {user_reputation}"
        )

        if message.from_user.id == requested_user_id:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"))
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("+rep", callback_dataq=f"add_rep|{requested_user_id}"))
            markup.add(types.InlineKeyboardButton("-rep", callback_dataq=f"subtract_rep|{requested_user_id}"))


        await bot.send_message(message.chat.id, profile_info_text, reply_markup=markup)
    else:
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –°–±—Ä–æ—Å—å—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


def get_requested_user_id_from_callback_data(call: types.CallbackQuery) -> int:
    callback_dataq = call.data.split("|")
    if len(callback_dataq) == 2:
        return int(callback_dataq[1])
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞")


@dp.callback_query_handler(lambda call: call.data.startswith("add_rep"))
async def add_rep(call: types.CallbackQuery):
    user_changing_rep_id = call.from_user.id
    requested_user_id = get_requested_user_id_from_callback_data(call)

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    user_reputation = get_user_reputation(user_changing_rep_id)
    if user_reputation == 0:
        await call.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
    else:
        update_rep(requested_user_id, 1, user_changing_rep_id)
        new_reputation = get_user_reputation(user_changing_rep_id)
        await call.answer(f"+rep. –ú–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {new_reputation}")



@dp.callback_query_handler(lambda call: call.data.startswith("subtract_rep"))
async def subtract_rep(call: types.CallbackQuery):
    user_changing_rep_id = call.from_user.id
    requested_user_id = get_requested_user_id_from_callback_data(call)

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    user_reputation = get_user_reputation(user_changing_rep_id)
    if user_reputation == 0:
        await call.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
    else:
        update_rep(requested_user_id, -1, user_changing_rep_id)
        new_reputation = get_user_reputation(user_changing_rep_id)
        await call.answer(f"-rep. –ú–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {new_reputation}")


def update_profile_description(user_id, new_description):
    with sqlite3.connect("users.db") as db:
        cursor = db.cursor()
        cursor.execute("UPDATE users SET profile_description=? WHERE id=?", (new_description, user_id))
        db.commit()


@dp.callback_query_handler(lambda call: call.data == "edit_description")
async def edit_description(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    await EditDescriptionFSM.enter_description.set()


@dp.message_handler(lambda message: len(message.text) <= 15 and message.text.isalpha(), state=EditDescriptionFSM.enter_description)
async def update_description(message: types.Message, state: FSMContext):
    new_description = message.text
    user_id = message.from_user.id

    update_profile_description(user_id, new_description)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.finish()

@dp.message_handler(lambda message: len(message.text) > 15 or not message.text.isalpha(), state=EditDescriptionFSM.enter_description)
async def description_invalid(message: types.Message):
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")




BAD_WORDS = ["—Å—É–∫–∞", "—Ö—É–π", "–ø–∏–∑–¥–∞", "https://", "http://", "–º–∞–º–∞", "–º–∞–º—É –µ–±–∞–ª", "https", "http", "–£–∫—Ä–∞–∏–Ω–∞", "—É–∫—Ä–∞–∏–Ω–∞", "–°–í–û", "—Å–≤–æ", "—à–ª—é—Ö–∞"]
def contains_bad_words(text: str) -> bool:
    return any(bad_word.lower() in text.lower() for bad_word in BAD_WORDS)

#################################################################################################################################–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
warnings_count = defaultdict(int)


@dp.message_handler(lambda message: message.text == "üë• –û–Ω–ª–∞–π–Ω", content_types=types.ContentTypes.TEXT)
async def show_online_users(message: types.Message):
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 'üë• –û–Ω–ª–∞–π–Ω'")
    user_id = message.from_user.id
    if not is_user_in_any_group(user_id):
        await bot.send_message(message.chat.id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤–≤–µ–¥—è –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n/chat\n")
        return

    user_group = get_user_group(user_id)
    if user_group is not None:
        count = sum(1 for user in groups[user_group] if active_users[user])
        await bot.send_message(message.chat.id, f"üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: {count}")
    else:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.")


async def kick_user_from_chat(user_id):
    global active_users
    active_users[user_id] = False
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞
    await bot.send_message(user_id, text="–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑-–∑–∞ —Å–ø–∞–º–∞.")

from collections import defaultdict
import asyncio

last_message_time = defaultdict(float)

kick_time = {}  

stickers_sent = {}

last_sticker_time = {}

sticker_warnings = {}

last_photo_time = {}

photo_warnings = {} 

photos_sent = {}

user_reply_pairs = {}
async def kick_user_from_chat(user_id):
    active_users[user_id] = False
    kick_time[user_id] = asyncio.get_event_loop().time()
    await bot.send_message(user_id, text="–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞.")

from aiogram.utils.exceptions import BotBlocked

from aiogram.utils.exceptions import BadRequest

async def safe_send_message(user_id, text=None, sticker=None, photo=None, caption=None):
    try:
        if text:
            sent_message = await bot.send_message(user_id, text=text)
        elif sticker:
            sent_message = await bot.send_sticker(user_id, sticker=sticker)
        elif photo:
            sent_message = await bot.send_photo(user_id, photo=photo, caption=caption)
        else:
            return None
        return sent_message
    except BotBlocked:
        return None
    except BadRequest as e:
        print(f"BadRequest error: {e}")
        return None


#################################################################################################################################–ß–∞—Ç
@dp.message_handler(lambda message: not message.text.startswith('/') and not message.text.startswith('‚ôæ –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫') and not message.text.startswith('üí≠'), content_types=types.ContentTypes.TEXT)
async def chat_message(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    if user_id in kick_time:
        time_since_kick = asyncio.get_event_loop().time() - kick_time[user_id]
        if time_since_kick < 300:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
            await bot.send_message(user_id, text="–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")
            return
        else:
            del kick_time[user_id]
    ban_status = get_ban_status(user_id)
    print(f">>>>>>>>>>BAN>>>>>>: {ban_status}")

    if ban_status is None:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ.")
        return
    elif ban_status == 1:
        await message.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await kick_user_from_chat(user_id)
        return
    global last_message_time
    print (groups)
    user_id = message.from_user.id
    user_group = get_user_group(user_id)
    now = asyncio.get_event_loop().time()
    check = is_user_in_any_group(user_id)
    print(check)

    if now - last_message_time[user_id] < 0.40:
        warnings_count[user_id] += 1
        if warnings_count[user_id] >= 3:
            await kick_user_from_chat(user_id)
            return
        await bot.send_message(
            message.chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        )
        return
    else:
        warnings_count[user_id] = 0

    last_message_time[user_id] = now

    if user_group is not None:
        if active_users[user_id] and not is_changing_nickname[user_id]:
            nickname = get_nickName(user_id)
            text = message.text

            if not contains_bad_words(message.text):
                for user in groups[user_group]:
                    if active_users[user] and user != user_id:
                        new_message_text = f"{nickname} \n:{text}"

                        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∞—Ç–µ
                        sent_message = await safe_send_message(user, text=new_message_text)

                        if sent_message is not None:
                            if user not in user_message_links:
                                user_message_links[user] = {}

                            user_message_links[user][message.message_id] = sent_message.message_id




@dp.message_handler(content_types=types.ContentTypes.STICKER)
async def chat_sticker(message: types.Message):
    user_id = message.from_user.id
    sub_status = get_subscription(user_id)

    if sub_status == 0:
        sent_msg = await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /lsadmin.")
        if sent_msg is None:
            return
        return
    now = asyncio.get_event_loop().time()

    if user_id not in stickers_sent:
        stickers_sent[user_id] = []
    else:
        stickers_sent[user_id] = [t for t in stickers_sent[user_id] if now - t < 10]

    stickers_sent[user_id].append(now)

    if len(stickers_sent[user_id]) > 5:
        if user_id not in sticker_warnings:
            sticker_warnings[user_id] = 1
        else:
            sticker_warnings[user_id] += 1

        if sticker_warnings[user_id] >= 2:
            await kick_user_from_chat(user_id)
            # –í—ã–¥–∞—Ç—å –º—É—Ç –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        else:
            sent_msg = await safe_send_message(
                message.chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            )
            if sent_msg is None:
                return
        return
    if user_id in kick_time:
        time_since_kick = asyncio.get_event_loop().time() - kick_time[user_id]
        if time_since_kick < 300:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
            sent_msg = await safe_send_message(user_id, text="–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")
            if sent_msg is None:
                return
            return
        else:
            del kick_time[user_id]
    ban_status = get_ban_status(user_id)

    if ban_status is None:
        sent_msg = await safe_send_message("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ.")
        if sent_msg is None:
            return
        return
    elif ban_status == 1:
        sent_msg = await safe_send_message("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        if sent_msg is None:
            return
        await kick_user_from_chat(user_id)
        return

    global last_message_time
    now = asyncio.get_event_loop().time()

    if now - last_message_time[user_id] < 0.40:
        warnings_count[user_id] += 1
        if warnings_count[user_id] >= 3:
            await kick_user_from_chat(user_id)
            return
        sent_msg = await bot.send_message(
            message.chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç–∏–∫–µ—Ä—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞.",
        )
        if sent_msg is None:
            return
        return
    else:
        warnings_count[user_id] = 0

    last_message_time[user_id] = now

    user_group = get_user_group(user_id)
    if user_group is not None:
        for user in groups[user_group]:
            if active_users[user_id] and not is_changing_nickname[user_id]:
                nickname = get_nickName(user_id)
                if active_users[user] and user != user_id:
                    sent_msg = await safe_send_message(user, text=f"{nickname} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä:")
                    if sent_msg is None:
                        continue
                    sticker = message.sticker.file_id
                    await safe_send_message(user, sticker=sticker)
            elif not active_users[user_id]:
                sent_msg = await safe_send_message(
                    message.chat.id,
                    text="–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üí≠ –ß–∞—Ç'.",
                )
                if sent_msg is None:
                    return
            else:
                sent_msg = await safe_send_message(
                    message.chat.id,
                    text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–º–µ–Ω–∞ –Ω–∏–∫–∞.",
                )
                if sent_msg is None:
                    return





@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def chat_photo(message: types.Message):
    user_id = message.from_user.id
    sub_status = get_subscription(user_id)
    if sub_status == 0:
        await safe_send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /lsadmin.")
        return
    now = asyncio.get_event_loop().time()

    if user_id not in photos_sent:
        photos_sent[user_id] = []
    else:
        photos_sent[user_id] = [t for t in photos_sent[user_id] if now - t < 10]

    photos_sent[user_id].append(now)

    if len(photos_sent[user_id]) > 5:
        if user_id not in photo_warnings:
            photo_warnings[user_id] = 1
        else:
            photo_warnings[user_id] += 1

        if photo_warnings[user_id] >= 2:
            await kick_user_from_chat(user_id)
            # –í—ã–¥–∞—Ç—å –º—É—Ç –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        else:
            await safe_send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ.",
            )
        return
    last_photo_time[user_id] = now
    photo_warnings[user_id] = 0
    if user_id in kick_time:
        time_since_kick = asyncio.get_event_loop().time() - kick_time[user_id]
        if time_since_kick < 300:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
            await safe_send_message(user_id, "–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")
            return
        else:
            del kick_time[user_id]
    ban_status = get_ban_status(user_id)

    if ban_status is None:
        await safe_send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ.")
        return
    elif ban_status == 1:
        await safe_send_message(user_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await kick_user_from_chat(user_id)
        return

    global last_message_time
    now = asyncio.get_event_loop().time()

    if now - last_message_time[user_id] < 0.40:
        warnings_count[user_id] += 1
        if warnings_count[user_id] >= 3:
            await kick_user_from_chat(user_id)
            return
        await safe_send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ.",
        )
        return
    else:
        warnings_count[user_id] = 0

    last_message_time[user_id] = now


    user_group = get_user_group(user_id)
    if user_group is not None:
        for user in groups[user_group]:
            if active_users[user_id] and not is_changing_nickname[user_id]:
                nickname = get_nickName(user_id)
                if active_users[user] and user != user_id:
                    caption = nickname
                    photo = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞)
                    await safe_send_message(user, photo=photo, caption=caption)
            elif not active_users[user_id]:
                await safe_send_message(
                    user_id,
                    "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üí≠ –ß–∞—Ç'.",
                )
            else:
                await safe_send_message(
                    user_id,
                    "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–º–µ–Ω–∞ –Ω–∏–∫–∞.",
                )




def get_online_users_count(user_group):
    if user_group is None:
        return None

    count = 0
    for user in groups[user_group]:
        if active_users[user]:
            count += 1

    return count



def create_keyboard(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)

    # –ò–∑–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    is_active = active_users.get(user_id, False)
    markup.add(
        types.KeyboardButton("‚ôæ –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫"),
        types.KeyboardButton("üí≠ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞" if is_active else "üí≠ –í–æ–π—Ç–∏ –≤ —á–∞—Ç"),
    )
    markup.add(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏"),
        types.KeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"),
    )
    markup.add(types.KeyboardButton("üë• –û–Ω–ª–∞–π–Ω"))
    markup.add(types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))

    return markup




if __name__ == '__main__': # –µ—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ main —Ç–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ 
    executor.start_polling(dp, skip_updates=True)


# sub_status = get_subscription(user_id)
# if sub_status == 0:
#     await message.reply("–û—à–∏–±–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏\n –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–µ —Å–¥–µ–ª–∞–π—Ç–µ –†–∞–º–∞–∑–∞–Ω—É –º–∏–Ω–µ—Ç", parse_mode=ParseMode.HTML) # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
# else: